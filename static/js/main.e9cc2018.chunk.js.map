{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","state","button","autostart","time","step","changeButtonStatus","bind","onTick","tick","this","setState","console","log","clearInterval","timerID","tickAuto","setInterval","newTime","duration","milliseconds","parseInt","seconds","minutes","hours","msToTime","onClick","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OA8FeA,E,kDA3FX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CAACC,OAAS,EAAKF,MAAMG,UAClCC,KAAO,EAAKJ,MAAMI,KAClBC,KAAM,EAAKL,MAAMK,KACjBF,UAAY,EAAKH,MAAMG,WAI1B,EAAKG,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBACzB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBACd,EAAKE,KAAO,EAAKA,KAAKF,KAAV,gBAZI,E,sDAelB,WACIG,KAAKC,SAAS,CACVT,QAASQ,KAAKT,MAAMC,SAE1BU,QAAQC,IAAIH,KAAKT,MAAMC,SACK,IAApBQ,KAAKT,MAAMC,QACXQ,KAAKD,QAEgB,IAArBC,KAAKT,MAAMC,QACbY,cAAcJ,KAAKK,W,+BAG7B,WACEL,KAAKM,a,sBAGL,WAAW,IAAD,QACsB,IAAxBN,KAAKV,MAAMG,YAEfO,KAAKK,QAAUE,aACX,kBAAM,EAAKT,WACXE,KAAKT,MAAMI,S,kBAKvB,WAAO,IAAD,OAEFK,KAAKK,QAAUE,aACX,kBAAM,EAAKT,WACXE,KAAKT,MAAMI,Q,kCAMnB,WACIS,cAAcJ,KAAKK,W,oBAInB,WACI,IAAIG,EAAUR,KAAKT,MAAMG,KAAOM,KAAKT,MAAMI,KAC3CK,KAAKC,SAAS,CACVP,KAAMc,M,sBAIlB,SAASC,GACL,IAAIC,EAAeC,SAAUF,EAAW,IAAQ,KAC9CG,EAAUD,SAAUF,EAAW,IAAQ,IACvCI,EAAUF,SAAUF,EAAQ,IAAkB,IAC9CK,EAAQH,SAAUF,EAAQ,KAAuB,IAMnD,OAJAK,EAASA,EAAQ,GAAM,IAAMA,EAAQA,GAItB,KAHfD,EAAWA,EAAU,GAAM,IAAMA,EAAUA,GAGZ,KAF/BD,EAAWA,EAAU,GAAM,IAAMA,EAAUA,GAEI,IAAMF,I,oBAGrD,WAGI,OACI,gCACN,8BAAMV,KAAKe,SAASf,KAAKT,MAAMG,QAC/B,yBAAQsB,QAAShB,KAAKJ,mBAAtB,cAA4CI,KAAKT,MAAMC,OAAS,OAAO,kB,GAnFzDyB,aCWLC,MAXf,WACE,OACE,sBAAKC,UAAY,eAAjB,UACA,qBAAKA,UAAY,qBAAjB,sDACA,cAAC,EAAD,CAAOzB,KAAQ,IAASC,KAAQ,IAAMF,WAAa,IACnD,qBAAK0B,UAAY,qBAAjB,yDAEA,cAAC,EAAD,CAAOzB,KAAQ,IAAQC,KAAQ,IAAMF,WAAa,QCGvC2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9cc2018.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Timer extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        // Set initial state\r\n        this.state = {button : this.props.autostart,\r\n        time : this.props.time,\r\n        step :this.props.step,\r\n        autostart : this.props.autostart,\r\n        }\r\n          \r\n        // Binding this keyword\r\n     this.changeButtonStatus = this.changeButtonStatus.bind(this)\r\n      this.onTick = this.onTick.bind(this)\r\n      this.tick = this.tick.bind(this)\r\n      }\r\n\r\n    changeButtonStatus(){\r\n        this.setState({\r\n            button: !this.state.button\r\n          });   \r\n      console.log(this.state.button);\r\n          if (this.state.button===false){\r\n              this.tick();\r\n          }\r\n          if (this.state.button ===true){\r\n            clearInterval(this.timerID);\r\n        }\r\n    }\r\n  componentDidMount(){\r\n    this.tickAuto();  \r\n    }\r\n  \r\n    tickAuto(){\r\n        if (this.props.autostart ===true){\r\n\r\n        this.timerID = setInterval(\r\n            () => this.onTick(),\r\n            this.state.step\r\n          )\r\n        }\r\n\r\n}\r\ntick(){\r\n\r\n    this.timerID = setInterval(\r\n        () => this.onTick(),\r\n        this.state.step)\r\n\r\n      \r\n    }\r\n\r\n\r\ncomponentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n\r\n    onTick(){\r\n        let newTime = this.state.time - this.state.step\r\n        this.setState({\r\n            time: newTime \r\n        })\r\n}\r\n\r\nmsToTime(duration) {\r\n    var milliseconds = parseInt((duration % 1000) / 100),\r\n      seconds = parseInt((duration / 1000) % 60),\r\n      minutes = parseInt((duration / (1000 * 60)) % 60),\r\n      hours = parseInt((duration / (1000 * 60 * 60)) % 24);\r\n  \r\n    hours = (hours < 10) ? \"0\" + hours : hours;\r\n    minutes = (minutes < 10) ? \"0\" + minutes : minutes;\r\n    seconds = (seconds < 10) ? \"0\" + seconds : seconds;\r\n  \r\n    return hours + \":\" + minutes + \":\" + seconds + \".\" + milliseconds;\r\n  }\r\n\r\n    render() {\r\n       \r\n\r\n        return (\r\n            <div>\r\n      <div>{this.msToTime(this.state.time)}</div>\r\n      <button onClick={this.changeButtonStatus}> {this.state.button ? 'Stop':'Start'}</button>\r\n      </div>\r\n\r\n        )\r\n\r\n    }\r\n}   \r\n\r\n\r\nexport default Timer;\r\n","import './App.css';\nimport Timer from'./components/Timer.js';\nfunction App() {\n  return (\n    <div className = \"main-content\">\n    <div className = \"contact-list-title\">Timer with 2 seconds step with autostart</div>\n    <Timer time = {1000000} step = {2000} autostart = {true}/>\n    <div className = \"contact-list-title\">Timer with 1 seconds step without autostart</div>\n\n    <Timer time = {100000} step = {1000} autostart = {false}/></div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}